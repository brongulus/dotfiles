#+TITLE: Flake it till you make it!

The dots used to be managed by a custom [[./bin/make_symlink][script]] that I wrote,
which was very much prone to breakages, so I took a flaky approach.

This is an experimental branch where I'm testing nix.

I wish to work with a single file mindset and see how far I can
take it, that's why I opted to not use home-manager and use
GNU Stow instead for dotfiles symlink.

* References:
- [[https://blog.kubukoz.com/flakes-first-steps/][Flakes first steps]]
- [[https://ertt.ca/nix/shell-scripts/][Shell scripts with nix]]
- [[https://blog.mplanchard.com/posts/installing-a-specific-version-of-a-package-with-nix.html][Installing a specific version with nix]] (explains how to work with overlays)
- [[https://www.bekk.christmas/post/2021/16/dotfiles-with-nix-and-home-manager][Declarative management of dotfiles with Nix and Home Manager]]
- [[https://seroperson.me/2024/01/16/managing-dotfiles-with-nix/][Managing dotfiles with nix]]

* Installation
- Get the list of packages to replace using =brew leaves=.
- Install nix: =curl -L https://nixos.org/nix/install | sh=.

* Set-up the packages
- Create [[./flake.nix]]
- Run =nix --extra-experimental-features "nix-command flakes" profile install .= in the dotfiles directory.
- Run =stow <dir>= to symlink the dotfiles. e.g.: =stow nix=
- To upgrade the packages, run =nix flake update= and then =nix profile upgrade dotfiles=
- To upgrade specific flake inputs =nix flake update --update-input nixpkgs --update-input nix=
- Remember to run =nix-collect-garbage -d= to clean up old generations and to save space.

* Miscellaneous Tips
- If you're using macos, check [[./bin/nix-mac-app]] to add nix apps so that
  they can be indexed by spotlight.

